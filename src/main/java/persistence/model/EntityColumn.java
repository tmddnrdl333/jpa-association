package persistence.model;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

import java.lang.reflect.Field;
import java.util.AbstractMap;
import java.util.Map;
import java.util.Optional;

import static persistence.util.ReflectionUtil.getAnnotationIfPresent;

public class EntityColumn {
    private final String name;
    private final Class<?> type;
    private final int length;
    private Optional<Value> value;
    private final Boolean isPrimary;
    private final Boolean isNullable;
    private final Boolean isAutoGeneratedIdentity;

    private EntityColumn(
            String name,
            Class<?> type,
            int length,
            Optional<Value> value,
            Boolean isPrimary,
            Boolean isNullable,
            Boolean isAutoGeneratedIdentity
    ) {
        this.name = name;
        this.type = type;
        this.length = length;
        this.value = value;
        this.isPrimary = isPrimary;
        this.isNullable = isNullable;
        this.isAutoGeneratedIdentity = isAutoGeneratedIdentity;
    }

    public static EntityColumn build(Field field, Optional<Value> value) {
        String name = getColumnName(field);
        int length = getLength(field);
        Class<?> type = field.getType();

        return new EntityColumn(
                name,
                type,
                length,
                value,
                isPrimary(field),
                isNullable(field),
                isAutoGeneratedIdentity(field)
        );
    }

    private static String getColumnName(Field field) {
        return getAnnotationIfPresent(field, Column.class)
                .map(Column::name)
                .filter(name -> !name.isEmpty())
                .orElse(field.getName());
    }


    private static int getLength(Field field) {
        final int COLUMN_DEFAULT_LENGTH = 255;
        Optional<Column> annotation = getAnnotationIfPresent(field, Column.class);

        if (annotation.isPresent() && annotation.get().length() != COLUMN_DEFAULT_LENGTH) {
            return annotation.get().length();
        }
        return COLUMN_DEFAULT_LENGTH;
    }


    private static Boolean isNullable(Field field) {
        if (field.isAnnotationPresent(Id.class)) {
            return false;
        }
        if (!field.isAnnotationPresent(Column.class)) {
            return true;
        }
        return getAnnotationIfPresent(field, Column.class)
                .map(column -> column.nullable() && !column.unique())
                .orElse(false);
    }

    private static Boolean isPrimary(Field field) {
        return field.isAnnotationPresent(Id.class);
    }

    private static Boolean isAutoGeneratedIdentity(Field field) {
        return getAnnotationIfPresent(field, GeneratedValue.class)
                .map(annotation -> annotation.strategy().equals(GenerationType.IDENTITY))
                .orElse(false);
    }

    public String getName() {
        return name;
    }

    public Class<?> getType() {
        return type;
    }

    public int getLength() {
        return length;
    }

    public Object getValue() {
        return value.orElseThrow().getValue();
    }

    public void setValue(Object value) {
        this.value = Optional.of(new Value(value));
    }

    public Boolean isValueNotNull() {
        return !value.orElseThrow().isNull();
    }

    public Boolean isAutoGeneratedIdentity() {
        return isAutoGeneratedIdentity;
    }

    public Boolean isPrimary() {
        return isPrimary;
    }

    public Boolean isNullable() {
        return isNullable;
    }

    public Map.Entry<String, Object> toKeyValue() {
        return new AbstractMap.SimpleEntry<>(name, getValue());
    }
}
