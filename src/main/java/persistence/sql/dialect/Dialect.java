package persistence.sql.dialect;

import persistence.model.DataType;
import persistence.sql.dialect.type.DataTypeRegistry;

import java.util.List;
import java.util.stream.Collectors;

public abstract class Dialect {
    protected final String identifierQuote = "\"";
    protected final String valueQuote = "'";
    protected DataTypeRegistry dataTypeRegistry;

    protected Dialect(DataTypeRegistry dataTypeRegistry) {
        this.dataTypeRegistry = dataTypeRegistry;
    }

    public String getDataTypeFullName(Class<?> javaType, int length) {
        DataType dataType = dataTypeRegistry.getDataType(javaType);
        return dataType.getFullName(length);
    }

    public String getIdentifierQuoted(String identifier) {
        return identifierQuote + identifier + identifierQuote;
    }

    public String getIdentifiersQuoted(List<String> identifiers) {
        return identifiers.stream()
                .map(this::getIdentifierQuoted)
                .collect(Collectors.joining(", "));
    }

    public String getValueQuoted(Object value) {
        if (value == null) {
            return "NULL";
        }
        if (value instanceof String) {
            return valueQuote + value + valueQuote;
        }
        return value.toString();
    }

    public String getValuesQuoted(List<Object> values) {
        return values.stream()
                .map(this::getValueQuoted)
                .collect(Collectors.joining(", "));
    }

    public abstract String getNullDefinitionPhrase(Boolean isNull);

    public abstract String getAutoGeneratedIdentityPhrase();

    public abstract Boolean shouldSpecifyNotNullOnIdentity();

    public abstract Boolean checkIfExitsBeforeDropTable();
}
