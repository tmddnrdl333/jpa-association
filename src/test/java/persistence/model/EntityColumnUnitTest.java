package persistence.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

public class EntityColumnUnitTest {
    private EntityColumn idColumn;

    private EntityColumn nameColumn;

    private EntityColumn emailColumn;

    private EntityColumn ageColumn;

    @BeforeEach
    void setUp() throws NoSuchFieldException {
        Field idField = UnitTestEntity.class.getDeclaredField("id");
        Field nameField = UnitTestEntity.class.getDeclaredField("name");
        Field emailField = UnitTestEntity.class.getDeclaredField("email");
        Field ageField = UnitTestEntity.class.getDeclaredField("age");

        idColumn = EntityColumn.build(idField, Optional.empty());
        nameColumn = EntityColumn.build(nameField, Optional.empty());
        emailColumn = EntityColumn.build(emailField, Optional.empty());
        ageColumn = EntityColumn.build(ageField, Optional.empty());
    }

    @Test
    @DisplayName("@Column 어노테이션이 없는 필드는 default null 컬럼이다.")
    void testDefaultNullWithoutColumnAnnotation() {
        assertTrue(ageColumn.isNullable());
    }

    @Test
    @DisplayName("@Column 어노테이션이 있고 null 키에 대한 값이 없는 필드는 default null 컬럼이다.")
    void testDefaultNullWithColumnAnnotation() {
        assertTrue(emailColumn.isNullable());
    }

    @Test
    @DisplayName("@Column 어노테이션이 있고 null = false인 필드는 not null이다.")
    void testNotNullWithColumnAnnotation() {
        assertFalse(nameColumn.isNullable());
    }

    @Test
    @DisplayName("@Id 어노테이션이 있으면 PK이다.")
    void testPrimaryWithIdAnnotation() {
        assertAll(
                () -> assertTrue(idColumn.isPrimary()),
                () -> assertFalse(nameColumn.isPrimary()),
                () -> assertFalse(emailColumn.isPrimary()),
                () -> assertFalse(ageColumn.isPrimary())
        );
    }

    @Test
    @DisplayName("@GeneratedValue 어노테이션이 있고 GenerationType이 Identity면 값이 자동으로 생성되는 컬럼이다.")
    void testAutoGeneratedIdentityWithGeneratedValueAnnotation() {
        assertAll(
                () -> assertTrue(idColumn.isAutoGeneratedIdentity()),
                () -> assertFalse(nameColumn.isAutoGeneratedIdentity()),
                () -> assertFalse(emailColumn.isAutoGeneratedIdentity()),
                () -> assertFalse(ageColumn.isAutoGeneratedIdentity())
        );
    }
}
